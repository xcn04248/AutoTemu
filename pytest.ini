"""
pytest 配置文件
"""

import pytest
import os
import sys
from pathlib import Path

# 添加项目根目录到Python路径
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# 设置测试环境变量
os.environ.setdefault('TESTING', 'true')
os.environ.setdefault('LOG_LEVEL', 'DEBUG')
os.environ.setdefault('TEMU_APP_KEY', 'test_app_key')
os.environ.setdefault('TEMU_APP_SECRET', 'test_app_secret')
os.environ.setdefault('TEMU_ACCESS_TOKEN', 'test_access_token')
os.environ.setdefault('TEMU_BASE_URL', 'https://test-api.temu.com')
os.environ.setdefault('PRICE_MARKUP', '1.3')
os.environ.setdefault('TEMU_CNY_TO_JPY_RATE', '20.0')
os.environ.setdefault('DEFAULT_PARENT_SPEC_ID', '3001')
os.environ.setdefault('DEFAULT_WAREHOUSE_ID', 'WHS-TEST')
os.environ.setdefault('DEFAULT_SKU_STOCK', '100')
os.environ.setdefault('PRODUCT_NAME_MAX_LENGTH', '250')

# pytest配置
def pytest_configure(config):
    """pytest配置"""
    config.addinivalue_line(
        "markers", "unit: 单元测试"
    )
    config.addinivalue_line(
        "markers", "integration: 集成测试"
    )
    config.addinivalue_line(
        "markers", "slow: 慢速测试"
    )

def pytest_collection_modifyitems(config, items):
    """修改测试收集"""
    for item in items:
        # 为测试文件添加标记
        if "test_bg_client.py" in str(item.fspath):
            item.add_marker(pytest.mark.unit)
        elif "test_bg_transformer.py" in str(item.fspath):
            item.add_marker(pytest.mark.unit)
        elif "test_api_adapter.py" in str(item.fspath):
            item.add_marker(pytest.mark.unit)
        elif "test_product_manager_integration.py" in str(item.fspath):
            item.add_marker(pytest.mark.integration)
        
        # 为慢速测试添加标记
        if "integration" in item.name or "end_to_end" in item.name:
            item.add_marker(pytest.mark.slow)

# 测试会话配置
@pytest.fixture(scope="session")
def test_session():
    """测试会话fixture"""
    print("开始测试会话")
    yield
    print("结束测试会话")

# 测试环境清理
@pytest.fixture(autouse=True)
def cleanup_test_environment():
    """自动清理测试环境"""
    yield
    # 清理测试产生的临时文件
    import tempfile
    import shutil
    
    temp_dir = tempfile.gettempdir()
    for item in os.listdir(temp_dir):
        if item.startswith('test_') or item.startswith('temp_'):
            item_path = os.path.join(temp_dir, item)
            try:
                if os.path.isfile(item_path):
                    os.remove(item_path)
                elif os.path.isdir(item_path):
                    shutil.rmtree(item_path)
            except (OSError, PermissionError):
                pass  # 忽略清理错误
